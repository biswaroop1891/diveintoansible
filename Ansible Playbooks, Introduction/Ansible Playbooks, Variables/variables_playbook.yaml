---

- name: Simple example of variable
  hosts: centos
  vars:
    ex_var: value
  tasks:
    - name: testing variables
      debug:
        msg: "{{ ex_var }}"


- name: defining and calling varible as dictionary
  hosts: centos

  vars:
    dict:
      dict_var: dict value
  tasks:
    - name: calling the entire dict 
      debug:
        msg: "{{ dict }}"
    - name: calling the dict value
      debug:
        msg: "{{ dict.dict_var }}"
    - name: same as above but Bracket notation
      debug:
        msg: "{{ dict['dict_var'] }}"

- name: defining and calling varible as item list
  hosts: centos

  vars:
    var_item:
      - item 1
      - item 2
      - item 3
    # Item list can be defined inline also like so 
    # var_item: [item1 , item2, item3]
  tasks:
    - name: calling the entire item list 
      debug:
        msg: "{{ var_item }}"
    - name: calling specific item value
      debug:
        msg: "{{ var_item.0 }}"
    - name: same as above but Bracket notation
      debug:
        msg: "{{ var_item[0] }}"

- name: defining and calling varible as dictionary and item list but the variables are defined in a file and not here. Same as above but from a file
  hosts: centos
  vars_files: 
    - vars_file.yaml
  tasks:
    - name: calling the entire dict 
      debug:
        msg: "{{ dict }}"
    - name: calling the dict value
      debug:
        msg: "{{ dict.dict_var }}"
    - name: same as above but Bracket notation
      debug:
        msg: "{{ dict['dict_var'] }}"
    - name: calling the entire item list 
      debug:
        msg: "{{ var_item }}"
    - name: calling specific item value
      debug:
        msg: "{{ var_item.0 }}"
    - name: same as above but Bracket notation
      debug:
        msg: "{{ var_item[0] }}"
    - name: calling the entire inline item list 
      debug:
        msg: "{{ var_item_inline }}"
    - name: calling specific inline item value
      debug:
        msg: "{{ var_item_inline.0 }}"
    - name: same as above but Bracket notation
      debug:
        msg: "{{ var_item_inline[0] }}"

- name: calling hostvars defined in the Invenory file 
  hosts: centos
  # port: 22 ---->>  we can define the port here amd other playbook keywords/variables and that will take effect but that will not be loaded as hostvars; like when defined in the Inventory file.
  gather_facts: True
  tasks:
    - name: Test hostvars with an ansible fact and collect ansible_port, dot notation
      debug:
        msg: "{{ hostvars[ansible_hostname].ansible_port }}"

    - name: Test hostvars with an ansible fact and collect ansible_port, dict notation
      debug:
        msg: "{{ hostvars[ansible_hostname]['ansible_port'] }}"


- name: calling groupvars defined in the Invenory file 
  hosts: centos 
  gather_facts: True
  tasks:
    - name: Test groupvars
      debug:
        msg: "{{ ansible_user }}"

- name: groupvars defined in Inventory file gets loaded at the host level as the hostvars
  hosts: centos 
  gather_facts: True
  tasks:
    - name: Test groupvars loaded as hostvars at the host level.
      debug:
        msg: "{{ hostvars[ansible_hostname]['ansible_user'] }}"

- name: if a variable is not defined neither as the hostvar or as groupvar for a host/group then we can use jinja2 template to set a default.
  hosts: ubuntu 
  gather_facts: True
  tasks:
    - name: Test groupvars loaded as hostvars at the host level.
      debug:
        msg: "{{ hostvars[ansible_hostname]['ansible_user'] | default('root') }}" # Remove the defaul section and test it will fail.

- name: calling extra_vars called using -e option using any format ini, json or yaml 
  hosts: centos 
  gather_facts: True
  tasks:
    - name: Testing extra_vars called using -e option
      debug:
        msg: "{{ extra_vars }}"
# define the extra variable as this while calling from the CLI 
# ansible-playbook variables_playbook.yaml -e "extra_vars='this is multi line value'" -- this is ini format stick to it.

- name: calling extra_vars called from a file either JSON or YAMLformat
  hosts: centos 
  gather_facts: True
  tasks:
    - name: Testing extra_vars called from a file
      debug:
        msg: "{{ extra_vars1 }}"

# call the extra variable from a extra vars file using the command
# ansible-playbook variables_playbook.yaml -e "@path_relative-to-the-playbook" -e "'some_var=value'"  --> can pass multiple Extra vars if needed.

# Can also add hostvars and groupvars in files. In this case the file name should match the hostname or the groupname for the hostvars and the groupvars respectively.
# And the hostvars should be kept in the a folder: host_vars/file_with_hostname and group_vars/file_with_grp_name
...